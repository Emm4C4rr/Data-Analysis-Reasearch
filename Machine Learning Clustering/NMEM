import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
from sklearn.model_selection import train_test_split
import numpy as np
import optuna
from sklearn.metrics import r2_score


df = pd.read_csv('C:/Users/emmam/PycharmProjects/pythonProject2/Summer project/data wrangling samples/Sexuality_Crime_2022.csv')
df2 = df.drop(columns=['Unnamed: 0', 'Mn_RT_all_3467', 'PCT_error_3467', 'Stimuli'])
X = df2.drop(['att_7', 'State'], axis=1)
y = df2['att_7']
clusters = df2['State']

X = torch.tensor(X.values, dtype=torch.float32)
y = torch.tensor(y.values, dtype=torch.float32).unsqueeze(1) 
clusters = torch.tensor(pd.factorize(clusters)[0], dtype=torch.long)

X_train, X_test, y_train, y_test, clusters_train, clusters_test = train_test_split(X, y, clusters, test_size=0.3, random_state=42)

train_dataset = TensorDataset(X_train, y_train, clusters_train)
test_dataset = TensorDataset(X_test, y_test, clusters_test)
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

# Define the Neural Network for Fixed Effects with variable hyperparameters
class FixedEffectsNN(nn.Module):
    def __init__(self, input_dim, hidden_dim1, hidden_dim2):
        super(FixedEffectsNN, self).__init__()
        self.fc1 = nn.Linear(input_dim, hidden_dim1)
        self.fc2 = nn.Linear(hidden_dim1, hidden_dim2)
        self.fc3 = nn.Linear(hidden_dim2, 1)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        return self.fc3(x)

# Define the NMEM Model with hyperparameter inputs
class NMEM(nn.Module):
    def __init__(self, input_dim, num_clusters, hidden_dim1, hidden_dim2, lr):
        super(NMEM, self).__init__()
        self.fixed_effects_nn = FixedEffectsNN(input_dim, hidden_dim1, hidden_dim2)
        self.random_effects = nn.Embedding(num_clusters, 1)
        self.optimizer = optim.Adam(self.parameters(), lr=lr)

    def forward(self, x, cluster):
        fixed_effects = self.fixed_effects_nn(x)
        random_effects = self.random_effects(cluster)
        return fixed_effects + random_effects

    def train_model(self, train_loader, num_epochs=10):
        self.train()
        criterion = nn.MSELoss()
        for epoch in range(num_epochs):
            running_loss = 0.0
            for inputs, labels, cluster in train_loader:
                self.optimizer.zero_grad()
                outputs = self(inputs, cluster)
                loss = criterion(outputs, labels)
                loss.backward()
                self.optimizer.step()
                running_loss += loss.item()
            print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(train_loader):.4f}")

# Compute the number of clusters
num_clusters = clusters.max().item() + 1

# Finding best parameters
def objective(trial):
    hidden_dim1 = trial.suggest_int('hidden_dim1', 32, 128)
    hidden_dim2 = trial.suggest_int('hidden_dim2', 16, 64)
    lr = trial.suggest_float('lr', 1e-4, 1e-1, log=True)
    num_epochs = 10

    model = NMEM(input_dim=X.shape[1], num_clusters=num_clusters, hidden_dim1=hidden_dim1, hidden_dim2=hidden_dim2, lr=lr)
    model.train_model(train_loader, num_epochs)

    # Evaluate the model
    def evaluate_model(model, test_loader):
        model.eval()
        y_true = []
        y_pred = []
        with torch.no_grad():
            for inputs, labels, cluster in test_loader:
                outputs = model(inputs, cluster)
                y_true.extend(labels.numpy())
                y_pred.extend(outputs.numpy())
        return np.array(y_true), np.array(y_pred)

    y_true, y_pred = evaluate_model(model, test_loader)
    test_r2 = r2_score(y_true, y_pred)
    return test_r2

study = optuna.create_study(direction='maximize')
study.optimize(objective, n_trials=50)

# Print best parameters
print("Best parameters found: ", study.best_params)
print("Best R^2 score: ", study.best_value)

# Using best parameters to retrain and evaluate the model
best_params = study.best_params
best_model = NMEM(input_dim=X.shape[1], num_clusters=num_clusters,
                   hidden_dim1=best_params['hidden_dim1'],
                   hidden_dim2=best_params['hidden_dim2'],
                   lr=best_params['lr'])
best_model.train_model(train_loader, num_epochs=15)
